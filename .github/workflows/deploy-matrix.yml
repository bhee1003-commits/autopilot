name: Deploy to Cloud Run (matrix)

on:
  push:
    branches: [ "main", "beta", "exp" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  REGION: asia-northeast3
  PROJECT_ID: ust-multiverse-dev
  PROJECT_NUMBER: 128056465529
  IMAGE_REPO: cloud-run-source-deploy

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.out.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.CI_SA }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta'

      - name: Build & Push (buildpacks) — wait for SUCCESS
        id: out
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_REPO }}/app:${GITHUB_SHA}"
          gcloud builds submit \
            --pack image="$IMAGE" \
            --gcs-source-staging-dir "gs://${{ env.PROJECT_NUMBER }}-cloudbuild/source" \
            --async
          for i in {1..120}; do
            BID=$(gcloud builds list --filter="images:$IMAGE" --sort-by="~createTime" \
                  --format="value(ID)" --limit=1 --project ${{ env.PROJECT_ID }})
            if [[ -n "${BID:-}" ]]; then
              STATUS=$(gcloud builds describe "$BID" --project ${{ env.PROJECT_ID }} --format="value(status)")
              echo "Build $BID status=$STATUS"
              [[ "$STATUS" == "SUCCESS" ]] && break
              [[ "$STATUS" =~ ^(FAILURE|CANCELLED|TIMEOUT)$ ]] && { echo "Build failed ($STATUS)"; exit 1; }
            else
              echo "Build not visible yet..."
            fi
            sleep 10
          done
          [[ "${STATUS:-}" == "SUCCESS" ]] || { echo "Build did not reach SUCCESS"; exit 1; }
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        svc: [cloudrun-main, cloudrun-beta, cloudrun-exp]
    steps:
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.CI_SA }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta'

      - name: Deploy ${{ matrix.svc }}
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${{ needs.build.outputs.image }}"
          SVC="${{ matrix.svc }}"
          gcloud run deploy "$SVC" \
            --image "$IMAGE" \
            --region "${{ env.REGION }}" \
            --project "${{ env.PROJECT_ID }}" \
            --allow-unauthenticated \
            --quiet

      - name: Wait Ready & Smoke /health (${{ matrix.svc }})
        shell: bash
        run: |
          set -euo pipefail
          SVC="${{ matrix.svc }}"
          REGION="${{ env.REGION }}"
          PROJECT="${{ env.PROJECT_ID }}"
          URL=$(gcloud run services describe "$SVC" --region "$REGION" --project "$PROJECT" --format='value(status.url)')
          TARGET="${URL%/}/health"
          echo "Check: $TARGET"
          for i in {1..60}; do
            read LREADY LCREATED < <(gcloud run services describe "$SVC" --region "$REGION" --project "$PROJECT" --format='value(status.latestReadyRevisionName,status.latestCreatedRevisionName)')
            echo "Ready=$LREADY, Created=$LCREATED (t=$((i*5))s)"
            [[ -n "$LREADY" && "$LREADY" == "$LCREATED" ]] && break
            sleep 5
          done
          for i in {1..20}; do
            code="$(curl -L -sS -o /dev/null -w "%{http_code}" \
                    --connect-timeout 5 --max-time 10 \
                    --retry 5 --retry-delay 2 --retry-all-errors \
                    "$TARGET" || echo 000)"
            echo "Attempt $i → HTTP $code"
            [[ "$code" == "200" ]] && { echo "Health OK"; exit 0; }
            sleep 10
          done
          echo "ERROR: health check failed"; exit 1

      - name: Email on SUCCESS (${{ matrix.svc }})
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "[OK] ${{ matrix.svc }} deploy ✓"
          from: ${{ secrets.SMTP_FROM }}
          to: ${{ secrets.SMTP_TO }}
          body: |
            Service: ${{ matrix.svc }}
            Image:   ${{ needs.build.outputs.image }}
            URL:     (see Cloud Run)
            Run:     https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Email on FAILURE (${{ matrix.svc }})
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "[FAIL] ${{ matrix.svc }} deploy ✗"
          from: ${{ secrets.SMTP_FROM }}
          to: ${{ secrets.SMTP_TO }}
          body: |
            Service: ${{ matrix.svc }}
            Run:     https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
